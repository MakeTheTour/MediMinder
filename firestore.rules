
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read/write their own user document.
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;

      // Users can only manage their own subcollections.
      match /{subcollection}/{docId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Rules for the 'invitations' collection
    match /invitations/{invitationId} {
      // Allow a user to create an invitation.
      allow create: if request.auth != null;

      // Allow a user to read an invitation if they are the sender or the receiver.
      allow read: if request.auth != null && 
                   (resource.data.inviterId == request.auth.uid || resource.data.inviteeEmail == request.auth.token.email);
                   
      // Allow a user to update/delete an invitation (e.g., accept/decline)
      // if they are the inviter (to cancel) or the intended invitee (to accept/decline).
      allow update, delete: if request.auth != null &&
                            (resource.data.inviterId == request.auth.uid || resource.data.inviteeEmail == request.auth.token.email);
    }
    
    // Explicitly allow the queries made by the family page.
    // This is the key change to fix the permission-denied error.
    match /invitations/{invitationId} {
       // Allow querying invitations sent BY the current user.
      allow list: if request.auth != null && request.query.resource.data.inviterId == request.auth.uid;
      
      // Allow querying invitations sent TO the current user's email.
      allow list: if request.auth != null && request.query.resource.data.inviteeEmail == request.auth.token.email;
    }
  }
}
