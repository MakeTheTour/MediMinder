
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email == 'admin@mediminder.com';
    }

    // Users can only read/write their own data.
    // The {document=**} wildcard ensures this rule applies recursively to all subcollections.
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Invitations can be read by the inviter or the invitee.
    // They can be created by any authenticated user.
    // They can be updated/deleted by the inviter or invitee.
    match /invitations/{invitationId} {
      allow read, update, delete: if request.auth != null && 
          (request.auth.uid == resource.data.inviterId || request.auth.token.email == resource.data.inviteeEmail);
      allow create: if request.auth != null;
    }
    
    // Only admins can manage ads, but anyone can read them.
    match /ads/{adId} {
      allow read: if true;
      allow write, delete, create: if isAdmin();
    }
    
    // Only admins can manage subscriptions.
    match /subscriptions/{subId} {
        allow read, write, create, delete: if isAdmin();
    }
    
    // Only admins can manage API settings
    match /settings/api {
        allow read, write: if isAdmin();
    }
  }
}
