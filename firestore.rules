
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAppAdmin() {
      return request.auth.token.email == 'admin@mediminder.com';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read, update, delete: if isOwner(userId) || isAppAdmin();
      allow create: if request.auth != null || isAppAdmin();
      allow list: if isAppAdmin();

      match /{allPaths=**} {
        allow read, write: if isOwner(userId) || isAppAdmin();
      }
    }
    
    match /invitations/{invitationId} {
      // Allow list if the query is constrained to the user's inviterId or inviteeEmail
      allow list: if (request.query.limit <= 10 && 
                      (request.query.filters.size() == 1 &&
                       'inviterId' in request.query.filters[0].field &&
                       request.query.filters[0].value == request.auth.uid)) ||
                     (request.query.filters.size() == 1 &&
                      'inviteeEmail' in request.query.filters[0].field &&
                      request.query.filters[0].value == request.auth.token.email);

      // Allow get/read if the user is the inviter or invitee
      allow get: if request.auth.uid == resource.data.inviterId || request.auth.token.email == resource.data.inviteeEmail || isAppAdmin();
      
      // Allow create if the user is the inviter
      allow create: if request.auth.uid == request.resource.data.inviterId;
      
      // Allow update if the user is the invitee (accepting)
      allow update: if request.auth.token.email == resource.data.inviteeEmail;
      
      // Allow delete if the user sent the invitation (cancelling)
      allow delete: if request.auth.uid == resource.data.inviterId;
    }
  }
}
